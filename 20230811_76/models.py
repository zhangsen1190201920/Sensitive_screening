from tools.datetime_utils import get_date_time
# 文件订阅规则只会从数据库的数据构造
class FileSubscribeDo:
    def __init__(self, res=None):
        if res is not None:
            self.filesubscribe_id = res[0]
            self.subscribe_name = res[1]
            self.subscribe_source = res[2]
            self.subscribe_ip = res[3]
            self.file_type = res[4]
            self.operate_time = res[5]
            self.process_state = res[6]


# 敏感模型只会通过数据库的数据构造
class SensitiveModelDo:
    def __init__(self, res=None):
        if res is not None:
            self.model_id = res[0]
            self.model_name = res[1]
            self.industry = res[2]
            self.file_type = res[3]
            self.sensitive_rule = res[4]
            self.need_special_engine = res[5]
            self.need_irregular_judge = res[6]
            self.operate_time = res[7]
            self.process_state = res[8]


# Csemp只会通过数据库的数据构造
class Csemp:
    def __init__(self, res):
        if res is not None:
            self.monitor_id = res[0]
            self.operate_type = res[1]
            self.point_type = res[2]
            self.rule_id = res[3]
            self.name = res[4]
            self.proto_type = res[5]
            self.is_valid = res[6]
            self.pre_valid_duration = res[7]
            self.valid_time = res[8]
            self.invalid_time = res[9]
            self.event_script = res[10]
            self.event_action = res[11]
            self.log_reverse = res[12]
            self.log_report_position = res[13]
            self.security_type = res[14]
            self.respponse_type = res[15]
            self.security_level = res[16]
            self.importance_type = res[17]
            self.match_type = res[18]
            self.process_state = res[19]
            self.fail_code = res[20]
            self.operate_time = res[21]


# 不同数据源的数据统一称为DataUnit,数据单元作为"产品"在生产者消费者中间传递,同时也作为写入日志的数据来源

# 文件数据单元从文件内容构造
class HttpFileDataUnit:
    tablename = "fs_http"

    def __init__(self, line=None, filepath=None):
        if line is None:
            return
        items = line.split("\t")
        self.c_netnum = items[0]
        self.c_ip = items[1]
        self.c_time = items[2]
        self.c_flowid = items[3]
        self.c_src_ip = items[4]
        self.c_src_ipv6 = items[5]
        self.c_src_port = items[6]
        self.c_s_tunnel_ip = items[7]
        self.c_s_tunnel_port = items[8]
        self.c_dest_ip = items[9]
        self.c_dest_ipv6 = items[10]
        self.c_dest_port = items[11]
        self.c_d_tunnel_ip = items[12]
        self.c_d_tunnel_port = items[13]
        self.c_proto_type = items[14]
        self.c_app_proto = items[15]
        self.c_decode_type = items[16]
        self.c_compress_type = items[17]
        self.c_file_md5 = items[18]
        self.c_file_type = items[19]
        self.c_file_size = items[20]
        self.c_file_name = items[21]
        self.c_file_data = items[22]
        self.c_url = items[23]
        self.c_cookie = items[24]
        self.c_s_boundary = items[25]
        self.c_s_region = items[26]
        self.c_s_city = items[27]
        self.c_s_district = items[28]
        self.c_s_operators = items[29]
        self.c_s_owner = items[30]
        self.c_d_boundary = items[31]
        self.c_d_region = items[32]
        self.c_d_city = items[33]
        self.c_d_district = items[34]
        self.c_d_operators = items[35]
        self.c_d_owner = items[36]
        self.c_msisdn = items[37]
        self.c_imsi = items[38]
        self.c_imei = items[39]
        self.c_meid = items[40]
        self.c_uli = items[41]
        self.c_bsid = items[42]
        self.c_apn = items[43]
        self.c_s_mark1 = items[44]
        self.c_s_mark2 = items[45]
        self.c_s_mark3 = items[46]
        self.c_s_mark4 = items[47]
        self.c_s_mark5 = items[48]
        self.c_d_mark1 = items[49]
        self.c_d_mark2 = items[50]
        self.c_d_mark3 = items[51]
        self.c_d_mark4 = items[52]
        self.c_d_mark5 = items[53]
        self.filepath = filepath  # 该文件名称为ftp拉取过来的文件名称，不是原始文件名称
        self.content = ""
        self.sm_hit = []
        self.geo_hit = []
        self.bio_hit = []
        self.dcm_hit =[]


class EmailFileDataUnit:
    tablename = "fs_email"

    def __init__(self, line=None, filepath=None):
        if line is None:
            return
        items = line.split("\t")
        self.c_netnum = items[0]
        self.c_ip = items[1]
        self.c_time = items[2]
        self.c_flowid = items[3]
        self.c_src_ip = items[4]
        self.c_src_ipv6 = items[5]
        self.c_src_port = items[6]
        self.c_s_tunnel_ip = items[7]
        self.c_s_tunnel_port = items[8]
        self.c_dest_ip = items[9]
        self.c_dest_ipv6 = items[10]
        self.c_dest_port = items[11]
        self.c_d_tunnel_ip = items[12]
        self.c_d_tunnel_port = items[13]
        self.c_proto_type = items[14]
        self.c_app_proto = items[15]
        self.c_decode_type = items[16]
        self.c_compress_type = items[17]
        self.c_file_md5 = items[18]
        self.c_file_type = items[19]
        self.c_file_size = items[20]
        self.c_file_name = items[21]
        self.c_file_data = items[22]
        self.c_url = items[23]
        self.c_cookie = items[24]
        self.c_s_boundary = items[25]
        self.c_s_region = items[26]
        self.c_s_city = items[27]
        self.c_s_district = items[28]
        self.c_s_operators = items[29]
        self.c_s_owner = items[30]
        self.c_d_boundary = items[31]
        self.c_d_region = items[32]
        self.c_d_city = items[33]
        self.c_d_district = items[34]
        self.c_d_operators = items[35]
        self.c_d_owner = items[36]
        self.c_msisdn = items[37]
        self.c_imsi = items[38]
        self.c_imei = items[39]
        self.c_meid = items[40]
        self.c_uli = items[41]
        self.c_bsid = items[42]
        self.c_apn = items[43]
        self.c_s_mark1 = items[44]
        self.c_s_mark2 = items[45]
        self.c_s_mark3 = items[46]
        self.c_s_mark4 = items[47]
        self.c_s_mark5 = items[48]
        self.c_d_mark1 = items[49]
        self.c_d_mark2 = items[50]
        self.c_d_mark3 = items[51]
        self.c_d_mark4 = items[52]
        self.c_d_mark5 = items[53]
        self.filepath = filepath  # 该文件名称为ftp拉取过来的文件名称，不是原始文件名称
        self.content = ""
        self.sm_hit = []
        self.geo_hit = []
        self.bio_hit = []
        self.dcm_hit = []


class FtpFileDataUnit:
    tablename = "fs_ftp"

    def __init__(self, line, filepath=None):
        if line is None:
            return
        items = line.split("\t")
        self.c_netnum = items[0]
        self.c_ip = items[1]
        self.c_time = items[2]
        self.c_flowid = items[3]
        self.c_src_ip = items[4]
        self.c_src_ipv6 = items[5]
        self.c_src_port = items[6]
        self.c_s_tunnel_ip = items[7]
        self.c_s_tunnel_port = items[8]
        self.c_dest_ip = items[9]
        self.c_dest_ipv6 = items[10]
        self.c_dest_port = items[11]
        self.c_d_tunnel_ip = items[12]
        self.c_d_tunnel_port = items[13]
        self.c_proto_type = items[14]
        self.c_app_proto = items[15]
        self.c_decode_type = items[16]
        self.c_compress_type = items[17]
        self.c_file_md5 = items[18]
        self.c_file_type = items[19]
        self.c_file_size = items[20]
        self.c_file_name = items[21]
        self.c_file_data = items[22]
        self.c_ftp_cd = items[23]
        self.c_ftp_user = items[24]
        self.c_s_boundary = items[25]
        self.c_s_region = items[26]
        self.c_s_city = items[27]
        self.c_s_district = items[28]
        self.c_s_operators = items[29]
        self.c_s_owner = items[30]
        self.c_d_boundary = items[31]
        self.c_d_region = items[32]
        self.c_d_city = items[33]
        self.c_d_district = items[34]
        self.c_d_operators = items[35]
        self.c_d_owner = items[36]
        self.c_msisdn = items[37]
        self.c_imsi = items[38]
        self.c_imei = items[39]
        self.c_meid = items[40]
        self.c_uli = items[41]
        self.c_bsid = items[42]
        self.c_apn = items[43]
        self.c_s_mark1 = items[44]
        self.c_s_mark2 = items[45]
        self.c_s_mark3 = items[46]
        self.c_s_mark4 = items[47]
        self.c_s_mark5 = items[48]
        self.c_d_mark1 = items[49]
        self.c_d_mark2 = items[50]
        self.c_d_mark3 = items[51]
        self.c_d_mark4 = items[52]
        self.c_d_mark5 = items[53]
        self.filepath = filepath  # 该文件名称为ftp拉取过来的文件名称，不是原始文件名称
        self.content = ""
        self.sm_hit = []
        self.geo_hit = []
        self.bio_hit = []
        self.dcm_hit = []


class TrxFileDataUnit:
    tablename = "fs_monitor"

    def __init__(self, line, filepath):
        items = line.split('\t')
        self.rule_id = items[0]
        self.sip = items[1]
        self.sport = items[2]
        self.dip = items[3]
        self.dport = items[4]
        self.protocol = items[5]
        self.filename = items[6]
        self.filemd5 = items[7]
        self.filetype = items[8]
        self.filepath = filepath
        self.content = ""
        self.sm_hit = []
        self.geo_hit = []
        self.bio_hit = []


# 原始流量从post请求中的json数据构造
class RawTrafficDataUnit:
    tablename = "content_subscribe_result"

    def __init__(self, rt=None):
        if rt is not None:
            self.rule_id = rt["rule_id"]
            self.sip = rt["sip"]
            self.sport = rt["sport"]
            self.dip = rt["dip"]
            self.dport = rt["dport"]
            self.protocol = rt["protocol"]
            self.blockname = rt["blockname"]
            self.block_content = rt["block_content"]
            self.up_pkts = rt["up_pkts"]
            self.down_pkts = rt["down_pkts"]
            self.up_bytes = rt["up_bytes"]
            self.down_bytes = rt["down_bytes"]
            self.total_pkts = rt["total_pkts"]
            self.total_bytes = rt["total_bytes"]
            self.start_time = rt["start_time"]
            self.end_time = rt["end_time"]
            self.content = ""  # 提取之后的内容
            self.sm_hit = []
            self.geo_hit = []
            self.bio_hit = []

class ReturnValueDataUnit:
    tablename = "variable_value_result"
    def __init__(self,rv) -> None:
        if rv is not None:
            self.c_event_id = rv["c_event_id"]
            self.c_src_ip = rv["c_src_ip"]
            self.c_src_port = rv["c_src_port"]
            self.c_dest_ip = rv["c_dest_ip"]
            self.c_dest_port = rv["c_dest_port"]
            self.c_proto_type = rv["c_proto_type"]
            self.s_boundary = rv["s_boundary"]
            self.s_region = rv["s_region"]
            self.d_boundary = rv["d_boundary"]
            self.d_region = rv["d_region"]
            self.s_operators = rv["s_operators"]
            self.s_owner = rv["s_owner"]
            self.d_operators = rv["d_operators"]
            self.d_owner = rv["d_owner"]
            self.s_city = rv["s_city"]
            self.s_district = rv["s_district"]
            self.d_city = rv["d_city"]
            self.d_district = rv["d_district"]
            self.c_net_inoutid = rv["c_net_inoutid"]
            self.c_net_gkid = rv["c_net_gkid"]
            self.c_net_provid = rv["c_net_provid"]
            self.c_return_info = rv["c_return_info"]
            self.record_time = get_date_time()
            #self.c_time=rv["c_time"]
            self.sm_hit = []
            self.geo_hit = []
            self.bio_hit = []
            self.dcm_hit =[]
            self.ide_hit=[]
            self.jt808_hit=[]
            self.carvin_hit=[]
        else:
            self.id = ""
            self.c_event_id = ""
            self.c_src_ip = ""
            self.c_src_port = ""
            self.c_dest_ip = ""
            self.c_dest_port = ""
            self.c_proto_type = ""
            self.s_boundary = ""
            self.s_region = ""
            self.d_boundary = ""
            self.d_region = ""
            self.s_operators = ""
            self.s_owner = ""
            self.d_operators = ""
            self.d_owner = ""
            self.s_city = ""
            self.s_district = ""
            self.d_city = ""
            self.d_district = ""
            self.c_net_inoutid = ""
            self.c_net_gkid = ""
            self.c_net_provid = ""
            self.c_return_info = ""
            self.record_time =""


class SmHitLogDataUnit:
    tablename = "sm_hit"

    def __init__(self, data: dict):
        self.master_tablename = data["master_tablename"]
        self.model_id = data["model_id"]
        self.model_name = data["model_name"]
        self.industry = data["industry"]
        self.hit_content = data["content"]
        self.hit_count = data["hit_count"]
class SmHitLogDataUnit:
    tablename = "sm_hit"

    def __init__(self, data: dict):
        self.master_tablename = data["master_tablename"]
        self.model_id = data["model_id"]
        self.model_name = data["model_name"]
        self.industry = data["industry"]
        self.hit_content = data["content"]
        self.hit_count = data["hit_count"]
class IDeHitLogDataUnit:
    tablename= "identity_model"
    
    def __init__(self,data:dict) -> None:
        self.master_tablename = data["master_tablename"]
        self.model_id = data["model_id"]
        self.model_name = data["model_name"]
        self.industry = data["industry"]
        self.idcard=data["idcard"]
        self.host=data["host"]
        self.user_agent=data["user_agent"]
        self.name=data["name"]
        self.phone=data["phone"]
        self.address=data["address"]
        self.bankcard=data["bankcard"]
        self.password=data["password"]
        self.hit_count=data["hit_count"]
class GeoHitLogDataUnit:
    tablename = "geography_engine"
    def __init__(self,data:dict) -> None:
        self.master_tablename = data["master_tablename"]
        self.geography = data["geography"]
        self.geo_type = data["geo_type"]
        self.long_lati = data["long_lati"]
        self.fence_province = data["fence_province"]
        self.fence_city = data["fence_city"]
        self.fence_name = data["fence_name"]
        self.fence_type = data["fence_type"]
        self.fence_relation = data["fence_relation"]
        ## 20230414新增
        self.model_id = data["model_id"]
class BioHitLogDataUnit:
    tablename = "biology_engine"
    def __init__(self,data:dict) -> None:
        self.master_tablename = data["master_tablename"]
        self.model_id=data["model_id"]
        self.biology=data["biology"]
        self.species=data["species"]
        self.subsepcies=data["subsepcies"]
        self.sequencing=data["sequencing"]
        self.probability=data["probability"]
        self.bio_fragment=data["bio_fragment"]
class MedHitLogDataUnit:
    tablename= "medical_engine"
    def __init__(self,data:dict)->None:
       self.master_tablename=data["master_tablename"]
       self.Implementation_Version_Name=data["Implementation_Version_Name"]
       self.SOP_Instance_UID=data["SOP_Instance_UID"]
       self.Study_Date=data["Study_Date"]
       self.Series_Date=data["Series_Date"]
       self.Study_Time=data["Study_Time"]
       self.Series_Time=data["Series_Time"]
       self.Modality=data["Modality"]
       self.Manufacturer=data["Manufacturer"]
       self.Institution_Name=data["Institution_Name"]
       self.Referring_Physicians_Name=data["Referring_Physicians_Name"]
       self.Study_Description=data["Study_Description"]
       self.Series_Description=data["Series_Description"]
       self.Operators_Name=data["Operators_Name"]
       self.Manufacturers_Model_Name=data["Manufacturers_Model_Name"]
       self.Patients_Name=data["Patients_Name"]
       self.Patients_ID=data["Patients_ID"]
       self.Patients_Birth_Date=data["Patients_Birth_Date"]
       self.Patients_Sex=data["Patients_Sex"]
       self.Patients_Weight=data["Patients_Weight"]
       self.Pregnancy_Status=data["Pregnancy_Status"]
       self.Body_Part_Examined=data["Body_Part_Examined"]
       self.Study_ID=data["Study_ID"]
       self.Study_Instance_UID=data["Study_Instance_UID"]
       self.Series_Instance_UID=data["Series_Instance_UID"]
       ## 20230414新增
       self.model_id = data["model_id"]


class GBT32960HitLogDataUnit:
    tablename = "gbt32960_hit"
    def __init__(self,data:dict)->None:
        self.master_tablename=data["master_tablename"]
        self.model_id = data["model_id"]
        self.model_name = data["model_name"]
        self.industry = data["industry"]
        self.direction = data["direction"]
        self.cmdflag = data["cmdflag"]
        self.vin = data["vin"]
        self.carbrand = data["carbrand"]
        self.carprodcountry = data["carprodcountry"]
        self.carprodcompany = data["carprodcompany"]
        self.cartype = data["cartype"]
        self.carpl = data["carpl"]
        self.carsafe = data["carsafe"]
        self.carlx = data["carlx"]
        self.fdjandbsx = data["fdjandbsx"]
        self.carpptype = data["carpptype"]
        self.caryear = data["caryear"]
        self.carzpgc = data["carzpgc"]
        self.d1 = data["d1"]
        self.d2 = data["d2"]
        self.d3 = data["d3"]
        self.d4 = data["d4"]
        self.d5 = data["d5"]
        self.d6 = data["d6"]
        self.d7 = data["d7"]
        self.d8 = data["d8"]
        self.d9 = data["d9"]
        self.d10 = data["d10"]
        self.d11 = data["d11"]
        self.d12 = data["d12"]
        self.d13 = data["d13"]
        self.d14 = data["d14"]
        self.d15 = data["d15"]
        self.d16 = data["d16"]
        self.d17 = data["d17"]
        self.d18 = data["d18"]
        self.d19 = data["d19"]
        self.d20 = data["d20"]
        self.d21 = data["d21"]
        self.d22 = data["d22"]
        self.d23 = data["d23"]
        self.d24 = data["d24"]
        self.d25 = data["d25"]
        self.d26 = data["d26"]
        self.d27 = data["d27"]
        self.d28 = data["d28"]
        self.d29 = data["d29"]
        self.d30 = data["d30"]
        self.d31 = data["d31"]
        self.d32 = data["d32"]
        self.d33 = data["d33"]
        self.d34 = data["d34"]
        self.d35 = data["d35"]
        self.d36 = data["d36"]
        self.d37 = data["d37"]
        self.d38 = data["d38"]
        self.d39 = data["d39"]
        self.d40 = data["d40"]
        self.d41 = data["d41"]
        self.d42 = data["d42"]
        self.d43 = data["d43"]
        self.d44 = data["d44"]
        self.d45 = data["d45"]
        self.d46 = data["d46"]
        self.d47 = data["d47"]
        self.d48 = data["d48"]
        self.d49 = data["d49"]
        self.d50 = data["d50"]
        self.d51 = data["d51"]
        self.d52 = data["d52"]
        self.d53 = data["d53"]
        self.d54 = data["d54"]
        self.d55 = data["d55"]
        self.d56 = data["d56"]
        self.d57 = data["d57"]
        self.d58 = data["d58"]
        self.d59 = data["d59"]
        self.d60 = data["d60"]
        self.d61 = data["d61"]
        self.d62 = data["d62"]
        self.d63 = data["d63"]
        self.d64 = data["d64"]
        self.d65 = data["d65"]
        self.d66 = data["d66"]
        self.d67 = data["d67"]
        self.d68 = data["d68"]
        self.d69 = data["d69"]
        self.d70 = data["d70"]
        self.d71 = data["d71"]
        self.d72 = data["d72"]
        self.long_lati = data["long_lati"]
        self.d75 = data["d75"]
        self.d76 = data["d76"]
        self.d77 = data["d77"]
        self.d78 = data["d78"]
        self.d79 = data["d79"]
        self.d80 = data["d80"]
        self.d81 = data["d81"]
        self.d82 = data["d82"]
        self.d83 = data["d83"]
        self.d84 = data["d84"]
        self.d85 = data["d85"]
        self.d86 = data["d86"]
        self.d87 = data["d87"]
        self.d88 = data["d88"]
        self.d89 = data["d89"]
        self.d90 = data["d90"]
        self.d91 = data["d91"]
        self.d92 = data["d92"]
        self.d93 = data["d93"]
        self.d94 = data["d94"]
        self.d95 = data["d95"]
        self.d96 = data["d96"]
        self.d97 = data["d97"]
        self.d98 = data["d98"]
        self.d99 = data["d99"]
        self.d100 = data["d100"]
        self.d101 = data["d101"]
        self.d102 = data["d102"]
        self.d103 = data["d103"]
        self.d104 = data["d104"]
        self.d105 = data["d105"]
        self.d106 = data["d106"]
        self.d107 = data["d107"]
        self.fence_province = data["fence_province"]
        self.fence_city = data["fence_city"]
        self.fence_name = data["fence_name"]
        self.fence_type = data["fence_type"]
        self.fence_relation = data["fence_relation"]
# "*\t*\t*\t*\t*\t*\t*\t*\t*\t*\tBIO030-CAR_VIN_JL\t188.64.207.40\t47.110.175.169\t1793\t80\ttcp\t2023-02-28 00:00:09\teth_payload=E\\00\\01\\dd&\\a1@\\004\\06\\bbY.\\13U\\f6/n\\af\\a9.\\02\\00P#\\15a\\e1\\f6'\\81\\b5P\\18\\ff\\ff}\\10\\00\\00GET /tsp-ad/ecarx_ad_theme/vin/LB377U2W0NA251188 HTTP/1.1\\r\\nX-ENV-TYPE: production\\r\\nX-APP-ID: 270047_advertising\\r\\nAuthorization: RUMwRUVBRTI2NTAxODE5M0I5NEY5QjFCMzdCM0UwMDU=\\r\\nAccept: application/json;responseformat=3\\r\\nContent-type: application/json\\r\\nX-AGENT-TYPE: android\\r\\nX-DEVICE-TYPE: ihu\\r\\nX-OPERATOR-CODE: GEELY\\r\\nX-AGENT-VERSION: 5.1\\r\\nHost: api.xchanger.cn\\r\\nConnection: Keep-Alive\\r\\nAccept-Encoding: gzip\\r\\nUser-Agent: okhttp/3.12.1\\r\\n\\r\\n\tLB377U2W0NA251188\tJL\t中国\t浙江豪情汽车制造有限公司\t乘用车 车长大于4.4米小于等于4.6米\t*\t*\t2厢5门\t纯电动汽车 驱动电机峰值功率之和150 前驱动+无变速器\t*\t2022\t浙江豪情汽车制造有限公司山西分公司\t*\t*\t*\t*\t*\t*\t*\t*\t*\t*\n"
# sres = platestr+'\t' +sfznum+'\t' +carnum+'\t' +longlat+'\t' +phonestr+'\t' +namestr+'\t' +addrstr+'\t' +host+'\t' +liulanqistr+'\t' +pingtaistr+'\t'
class CarvinHitLogDataUnit:
    tablename = "carvin_hit"
    def __init__(self,result,)->None:
        items = result["line"].split("\t")
        self.master_tablename=result["master_tablename"]
        self.model_id = result["model_id"]
        self.model_name = result["model_name"]
        self.industry = result["industry"]
        self.host = items[7]
        self.platform = items[9]
        self.browser = items[8]
        self.names = items[5]
        self.phone = items[4]
        self.address = items[6]
        self.longlat = items[3]
        self.idcard = items[1]
        self.dirver_lic_num = items[2]
        self.plate_number = items[0]
        self.vin = items[18]
        self.vehicle_brand = items[19]
        self.product_country = items[20]
        self.automaker = items[21]
        self.vehicle_type = items[22]
        self.displacement = items[23]
        self.safety_protection = items[24]
        self.vehicle_style = items[25]
        self.engine_transmission = items[26]
        self.vehicle_model = items[27]
        self.produce_year = items[28]
        self.vehicle_assembly_plant = items[29]
        self.fence_province = result["geo_res"]["fence_province"]
        self.fence_city = result["geo_res"]["fence_city"]
        self.fence_name = result["geo_res"]["fence_name"]
        self.fence_type = result["geo_res"]["fence_type"]
        self.fence_relation = result["geo_res"]["fence_relation"]
class JT808HitLogDataUnit:
    tablename = "jt808_hit"
    def __init__(self,result,)->None:
        items = result["line"].split("\t")
        self.master_tablename = result["master_tablename"]
        self.model_id = result["model_id"]
        self.model_name = result["model_name"]
        self.industry = result["industry"]
        self.message_id = items[10]
        self.alarm_message_type = items[11]
        self.terminal_phone_number = items[12]
        self.message_serial_number = items[13]
        self.message_all_num = items[14]
        self.package_number = items[15]
        self.alarm_emergency_alarm = items[16]
        self.alarm_overspeed_alarm = items[17]
        self.alarm_fatigue_driving = items[18]
        self.alarm_riskearly_warning = items[19]
        self.alarm_gnssmodule_failure = items[20]
        self.alarm_gnssantenna_notanswer = items[21]
        self.alarm_gnssantenna_shortout = items[22]
        self.alarm_terminal_powersource_undercoltage = items[23]
        self.alarm_terminal_powersource_powerdown = items[24]
        self.alarm_terminal_malfunction = items[25]
        self.alarm_tts_malfunction = items[26]
        self.alarm_camera_malfunction = items[27]
        self.alarm_iccard_malfunction = items[28]
        self.alarm_overspeed_warning = items[29]
        self.alarm_fatigue_driving_warning = items[30]
        self.alarm_intraday_diving_timeout = items[31]
        self.alarm_timeout_parking = items[32]
        self.alarm_turnover_area = items[33]
        self.alarm_turnover_path = items[34]
        self.alarm_travel_time = items[35]
        self.alarm_lane_departure = items[36]
        self.alarm_vss_malfunction = items[37]
        self.alarm_abnormal_oil = items[38]
        self.alarm_vehicle_stolen = items[39]
        self.alarm_lllegal_ignition = items[40]
        self.alarm_lllegal_displacement = items[41]
        self.alarm_collision_warning = items[42]
        self.alarm_cartwheel_warning = items[43]
        self.alarm_lllegal_opendoor = items[44]
        self.state_acc = items[45]
        self.state_positioning = items[46]
        self.state_lat_d = items[47]
        self.state_long_d = items[48]
        self.state_state = items[49]
        self.state_encryption_state = items[50]
        self.state_vehicle_load = items[51]
        self.state_oil_state = items[52]
        self.state_circuit_state = items[53]
        self.state_door_state = items[54]
        self.state_q_door1 = items[55]
        self.state_z_door2 = items[56]
        self.state_h_door3 = items[57]
        self.state_j_door4 = items[58]
        self.state_z_door5 = items[59]
        self.state_gps_state = items[60]
        self.state_beidou_state = items[61]
        self.state_glonass_state = items[62]
        self.state_galileo_state = items[63]
        self.long_lati = items[65]+","+items[64]
        self.elevation = items[66]
        self.speed = items[67]
        self.message_direction = items[68]
        self.update_time = items[69]
        self.add_message = items[70]
        self.cheack_code = items[71]

        self.fence_province = result["geo_res"]["fence_province"]
        self.fence_city = result["geo_res"]["fence_city"]
        self.fence_name = result["geo_res"]["fence_name"]
        self.fence_type = result["geo_res"]["fence_type"]
        self.fence_relation = result["geo_res"]["fence_relation"]
# class JT808HitLogDataUnit:
#     tablename = "jt808_hit"
#     def __init__(self,data:dict)->None:
#         self.master_tablename = data["master_tablename"]
#         self.id = data["id"]
#         self.model_id = data["model_id"]
#         self.model_name = data["model_name"]
#         self.industry = data["industry"]
#         self.message_id = data["message_id"]
#         self.alarm_message_type = data["alarm_message_type"]
#         self.terminal_phone_number = data["terminal_phone_number"]
#         self.message_serial_number = data["message_serial_number"]
#         self.message_all_num = data["message_all_num"]
#         self.package_number = data["package_number"]
#         self.alarm_emergency_alarm = data["alarm_emergency_alarm"]
#         self.alarm_overspeed_alarm = data["alarm_overspeed_alarm"]
#         self.alarm_fatigue_driving = data["alarm_fatigue_driving"]
#         self.alarm_riskearly_warning = data["alarm_riskearly_warning"]
#         self.alarm_gnssmodule_failure = data["alarm_gnssmodule_failure"]
#         self.alarm_gnssantenna_notanswer = data["alarm_gnssantenna_notanswer"]
#         self.alarm_gnssantenna_shortout = data["alarm_gnssantenna_shortout"]
#         self.alarm_terminal_powersource_undercoltage = data["alarm_terminal_powersource_undercoltage"]
#         self.alarm_terminal_powersource_powerdown = data["alarm_terminal_powersource_powerdown"]
#         self.alarm_terminal_malfunction = data["alarm_terminal_malfunction"]
#         self.alarm_tts_malfunction = data["alarm_tts_malfunction"]
#         self.alarm_camera_malfunction = data["alarm_camera_malfunction"]
#         self.alarm_iccard_malfunction = data["alarm_iccard_malfunction"]
#         self.alarm_overspeed_warning = data["alarm_overspeed_warning"]
#         self.alarm_fatigue_driving_warning = data["alarm_fatigue_driving_warning"]
#         self.alarm_intraday_diving_timeout = data["alarm_intraday_diving_timeout"]
#         self.alarm_timeout_parking = data["alarm_timeout_parking"]
#         self.alarm_turnover_area = data["alarm_turnover_area"]
#         self.alarm_turnover_path = data["alarm_turnover_path"]
#         self.alarm_travel_time = data["alarm_travel_time"]
#         self.alarm_lane_departure = data["alarm_lane_departure"]
#         self.alarm_vss_malfunction = data["alarm_vss_malfunction"]
#         self.alarm_abnormal_oil = data["alarm_abnormal_oil"]
#         self.alarm_vehicle_stolen = data["alarm_vehicle_stolen"]
#         self.alarm_lllegal_ignition = data["alarm_lllegal_ignition"]
#         self.alarm_lllegal_displacement = data["alarm_lllegal_displacement"]
#         self.alarm_collision_warning = data["alarm_collision_warning"]
#         self.alarm_cartwheel_warning = data["alarm_cartwheel_warning"]
#         self.alarm_lllegal_opendoor = data["alarm_lllegal_opendoor"]
#         self.state_acc = data["state_acc"]
#         self.state_positioning = data["state_positioning"]
#         self.state_lat_d = data["state_lat_d"]
#         self.state_long_d = data["state_long_d"]
#         self.state_state = data["state_state"]
#         self.state_encryption_state = data["state_encryption_state"]
#         self.state_vehicle_load = data["state_vehicle_load"]
#         self.state_oil_state = data["state_oil_state"]
#         self.state_circuit_state = data["state_circuit_state"]
#         self.state_door_state = data["state_door_state"]
#         self.state_q_door1 = data["state_q_door1"]
#         self.state_z_door2 = data["state_z_door2"]
#         self.state_h_door3 = data["state_h_door3"]
#         self.state_j_door4 = data["state_j_door4"]
#         self.state_z_door5 = data["state_z_door5"]
#         self.state_gps_state = data["state_gps_state"]
#         self.state_beidou_state = data["state_beidou_state"]
#         self.state_glonass_state = data["state_glonass_state"]
#         self.state_galileo_state = data["state_galileo_state"]
#         self.long_lati = data["long_lati"]
#         self.elevation = data["elevation"]
#         self.speed = data["speed"]
#         self.message_direction = data["message_direction"]
#         self.update_time = data["update_time"]
#         self.add_message = data["add_message"]
#         self.cheack_code = data["cheack_code"]
#         self.fence_province = data["fence_province"]
#         self.fence_city = data["fence_city"]
#         self.fence_name = data["fence_name"]
#         self.fence_type = data["fence_type"]
#         self.fence_relation = data["fence_relation"]        